Concurrency
Go Meetup #1 Bangalore 
22 Jun 2013

Adnaan Badr
badr.adnaan@gmail.com

* Goroutines

Concurrently executing function launched by the *go* statement.

.play concurrency/gopher.go

* Making it work

Do something in *main* goroutine to stop it from dying before func gopher executes.

.play concurrency/gopher1.go /START OMIT/,/END OMIT/

* Synchronization

As we saw func main didn't know what func gopher was doing. 

If it did, it would have not exited before letting func gopher finish it's work.

Talk about communication problems!

If they can communicate, they can synchronize.

* Channels

Channels to the rescue! They are way to provide communication between two goroutines.

.code concurrency/channels.go /INIT OMIT/,/ENDINIT OMIT/

.code concurrency/channels.go /SEND OMIT/,/ENDSEND OMIT/

.code concurrency/channels.go /REC OMIT/,/ENDREC OMIT/

* Channels and Goroutines

Let's add a channel to the mix!

.code concurrency/gopher2.go /GOPHER OMIT/,/ENDGOPHER OMIT/

.play concurrency/gopher2.go /MAIN OMIT/,/ENDMAIN OMIT/





